on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  flutter:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update latest Flutter version
        id: query
        uses: actions/github-script@v6
        with:
          script: |
            async function tarballExists(version, channel) {
              const fileUrl =  `https://storage.googleapis.com/flutter_infra_release/releases/${channel}/linux/flutter_linux_${version}-${channel}.tar.xz`;

              try {
                const response = await fetch(fileUrl, { method: 'HEAD' });

                return response.ok;
              } catch (error) {
                console.error(`An error occurred while requesting the file URL: ${fileUrl}`, error);
                
                return false;
              }
            }

            const query = `query GetLatestTags {
              repository(owner: "flutter", name: "flutter") {
                tags: refs(
                  refPrefix: "refs/tags/"
                  first: 20
                  orderBy: { field: TAG_COMMIT_DATE, direction: DESC }
                ) {
                  edges {
                    node {
                      version: name
                      target {
                        oid
                      }
                    }
                  }
                }
              }
            }`;

            const rawResult = await github.graphql(query)
            const stableTagPattern = /^\d+\.\d+\.\d+$/g
            const tags = rawResult.repository.tags.edges
            const latestTag = tags.find((tag) => tag.node.version.match(stableTagPattern))

            const fs = require('fs');
            const resultPath = 'version.json';
            const data = fs.readFileSync(resultPath, 'utf8');
            const json = JSON.parse(data);

            const version = latestTag.node.version;

            // Sometimes Flutter publishes stable versions to the beta channel because of it's release process.
            // https://github.com/flutter/flutter/wiki/Flutter-build-release-channels

            let channel;
            if(await tarballExists(version, 'stable');) {
              channel = 'stable';
            } else if(await tarballExists(version, 'beta')){
              channel = 'beta';
            } else{
              core.setFailed(`Flutter version ${version} doesn't exist in stable or beta channels.`);

              return false;
            }

            // Export FLUTTER_VERSION for the next steps
            core.exportVariable('FLUTTER_VERSION', version)
            core.exportVariable('FLUTTER_CHANNEL', channel)
            
            // Update result file, i.e. version.json
            const result = {
              ...json,
              flutter: {
                channel,
                commit: latestTag.node.target.oid,
                version
              }
            };

            fs.writeFileSync(resultPath, JSON.stringify(result, null, 4));

      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v2
        with:
          cache: true
          channel: ${{ env.FLUTTER_CHANNEL }}
          version: ${{ env.FLUTTER_VERSION }}

      # TODO: Create test app in specific folder with step id, to allow parallel execution
      - name: Create test application
        run: |
          flutter create test_app

      # TODO: Cache gradle https://github.com/gradle/gradle-build-action
      - name: Update default Android platform versions in Flutter
        working-directory: test_app/android
        run: |
          cat ../../script/updateAndroidVersions.gradle >> app/build.gradle
          ./gradlew --warning-mode all updateAndroidVersions

      - name: Clean test application
        run: |
          rm -rf test_app

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: docs/src/package-lock.json

      - name: Update documentation
        working-directory: docs/src
        run: |
          npm ci --prefer-offline
          npm run readme
          npm run ecr

      - name: Create pull request if there are changes
        uses: peter-evans/create-pull-request@v5
